diff --git a/builtins/Makefile.in b/builtins/Makefile.in
index 7e0ec32..312d168 100644
--- a/builtins/Makefile.in
+++ b/builtins/Makefile.in
@@ -152,7 +152,8 @@ DEFSRC =  $(srcdir)/alias.def $(srcdir)/bind.def $(srcdir)/break.def \
 	  $(srcdir)/times.def $(srcdir)/trap.def $(srcdir)/type.def \
 	  $(srcdir)/ulimit.def $(srcdir)/umask.def $(srcdir)/wait.def \
 	  $(srcdir)/reserved.def $(srcdir)/pushd.def $(srcdir)/shopt.def \
-	  $(srcdir)/printf.def $(srcdir)/complete.def $(srcdir)/mapfile.def
+	  $(srcdir)/printf.def $(srcdir)/complete.def $(srcdir)/mapfile.def \
+	  $(srcdir)/accept.def
 
 STATIC_SOURCE = common.c evalstring.c evalfile.c getopt.c bashgetopt.c \
 		getopt.h 
@@ -164,7 +165,8 @@ OFILES = builtins.o \
 	jobs.o kill.o let.o mapfile.o \
 	pushd.o read.o return.o set.o setattr.o shift.o source.o \
 	suspend.o test.o times.o trap.o type.o ulimit.o umask.o \
-	wait.o getopts.o shopt.o printf.o getopt.o bashgetopt.o complete.o
+	wait.o getopts.o shopt.o printf.o getopt.o bashgetopt.o complete.o \
+	accept.o
 
 CREATED_FILES = builtext.h builtins.c psize.aux pipesize.h tmpbuiltins.c \
 	tmpbuiltins.h
diff --git a/builtins/accept.def b/builtins/accept.def
new file mode 100644
index 0000000..1b2c5a2
--- /dev/null
+++ b/builtins/accept.def
@@ -0,0 +1,218 @@
+This file is accept.def, from which is created accept.c.
+It implements the builtin "accept" in Bash.
+
+Copyright (C) 1987-2018,2022 Free Software Foundation, Inc.
+
+This file is part of GNU Bash, the Bourne Again SHell.
+
+Bash is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+Bash is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with Bash.  If not, see <http://www.gnu.org/licenses/>.
+
+$PRODUCES accept.c
+
+$BUILTIN accept
+$FUNCTION accept_builtin
+$SHORT_DOC accept
+implements accept from examples/loadables
+$END
+
+
+#include <config.h>
+
+#if defined (HAVE_UNISTD_H)
+#  include <unistd.h>
+#endif
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include "bashtypes.h"
+#include <errno.h>
+#include <time.h>
+#include <limits.h>
+#include "typemax.h"
+
+#include "../shell.h"
+#include "bashgetopt.h"
+#include "common.h"
+
+#include <sys/socket.h>
+#include <arpa/inet.h>
+#include <netinet/in.h>
+
+static int
+accept_bind_variable (char *varname, int intval);
+
+int
+accept_builtin (WORD_LIST *list)
+{
+  SHELL_VAR *v;
+  intmax_t iport;
+  int opt;
+  char *tmoutarg, *fdvar, *rhostvar, *rhost, *bindaddr;
+  unsigned short uport;
+  int servsock, clisock;
+  struct sockaddr_in server, client;
+  socklen_t clientlen;
+  struct timeval timeval;
+  struct linger linger = { 0, 0 };
+
+  rhostvar = tmoutarg = fdvar = rhost = bindaddr = (char *)NULL;
+
+  reset_internal_getopt ();
+  while ((opt = internal_getopt (list, "b:r:t:v:")) != -1)
+    {
+      switch (opt)
+	{
+	case 'b':
+	  bindaddr = list_optarg;
+	  break;
+	case 'r':
+	  rhostvar = list_optarg;
+	  break;
+	case 't':
+	  tmoutarg = list_optarg;
+	  break;
+	case 'v':
+	  fdvar = list_optarg;
+	  break;
+	CASE_HELPOPT;
+	default:
+	  builtin_usage ();
+	  return (EX_USAGE);
+	}
+    }
+  
+  list = loptend;
+
+  /* Validate input and variables */
+  if (tmoutarg)
+    {
+      long ival, uval;
+      opt = uconvert (tmoutarg, &ival, &uval, (char **)0);
+      if (opt == 0 || ival < 0 || uval < 0)
+	{
+	  builtin_error ("%s: invalid timeout specification", tmoutarg);
+	  return (EXECUTION_FAILURE);
+	}
+      timeval.tv_sec = ival;
+      timeval.tv_usec = uval;
+      /* XXX - should we warn if ival == uval == 0 ? */
+    }
+
+  if (list == 0)
+    {
+      builtin_usage ();
+      return (EX_USAGE);
+    }
+
+  if (valid_number (list->word->word, &iport) == 0 || iport < 0 || iport > TYPE_MAXIMUM (unsigned short))
+    {
+      builtin_error ("%s: invalid port number", list->word->word);
+      return (EXECUTION_FAILURE);
+    }
+  uport = (unsigned short)iport;
+
+  if (fdvar == 0)
+    fdvar = "ACCEPT_FD";
+
+  unbind_variable (fdvar);
+  if (rhostvar)
+    unbind_variable (rhostvar);
+    
+  if ((servsock = socket (AF_INET, SOCK_STREAM, IPPROTO_IP)) < 0)
+    {
+      builtin_error ("cannot create socket: %s", strerror (errno));
+      return (EXECUTION_FAILURE);
+    }
+
+  memset ((char *)&server, 0, sizeof (server));
+  server.sin_family = AF_INET;
+  server.sin_port = htons(uport);
+  server.sin_addr.s_addr = bindaddr ? inet_addr (bindaddr) : htonl(INADDR_ANY);
+
+  if (server.sin_addr.s_addr == INADDR_NONE)
+    {
+      builtin_error ("invalid address: %s", strerror (errno));
+      return (EXECUTION_FAILURE);
+    }
+
+  opt = 1;
+  setsockopt (servsock, SOL_SOCKET, SO_REUSEADDR, (void *)&opt, sizeof (opt));
+  setsockopt (servsock, SOL_SOCKET, SO_LINGER, (void *)&linger, sizeof (linger));
+
+  if (bind (servsock, (struct sockaddr *)&server, sizeof (server)) < 0)
+    {
+      builtin_error ("socket bind failure: %s", strerror (errno));
+      close (servsock);
+      return (EXECUTION_FAILURE);
+    }
+
+  if (listen (servsock, 1) < 0)
+    {
+      builtin_error ("listen failure: %s", strerror (errno));
+      close (servsock);
+      return (EXECUTION_FAILURE);
+    }
+
+  if (tmoutarg)
+    {
+      fd_set iofds;
+
+      FD_ZERO(&iofds);
+      FD_SET(servsock, &iofds);
+
+      opt = select (servsock+1, &iofds, 0, 0, &timeval);
+      if (opt < 0)
+	builtin_error ("select failure: %s", strerror (errno));
+      if (opt <= 0)
+	{
+	  close (servsock);
+	  return (EXECUTION_FAILURE);
+	}
+    }
+
+  clientlen = sizeof (client);
+  if ((clisock = accept (servsock, (struct sockaddr *)&client, &clientlen)) < 0)
+    {
+      builtin_error ("client accept failure: %s", strerror (errno));
+      close (servsock);
+      return (EXECUTION_FAILURE);
+    }
+
+  close (servsock);
+
+  accept_bind_variable (fdvar, clisock);  
+  if (rhostvar)
+    {
+      rhost = inet_ntoa (client.sin_addr);
+      v = builtin_bind_variable (rhostvar, rhost, 0);
+      if (v == 0 || readonly_p (v) || noassign_p (v))
+	builtin_error ("%s: cannot set variable", rhostvar);
+    }
+
+  return (EXECUTION_SUCCESS);
+}
+
+static int
+accept_bind_variable (char *varname, int intval)
+{
+  SHELL_VAR *v;
+  char ibuf[INT_STRLEN_BOUND (int) + 1], *p;
+
+  p = fmtulong (intval, 10, ibuf, sizeof (ibuf), 0);
+  v = builtin_bind_variable (varname, p, 0);		/* XXX */
+  if (v == 0 || readonly_p (v) || noassign_p (v))
+    builtin_error ("%s: cannot set variable", varname);
+  return (v != 0);
+}
